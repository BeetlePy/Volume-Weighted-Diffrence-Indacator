//@version=5
indicator(title="Volume Weighted Difference", shorttitle="VWD", overlay=false)
length_sma = input.int(14, "SMA Length", minval=1)
length_ema = input.int(7, "EMA Length", minval=1)
window = input.int(21, "Window Length", minval=1)
length_rsi = input.int(9, "RSI Length", minval=1)
timeframe = input.timeframe("60", "Lower Timeframe for Volume")
timeframe_lookback_period = input.int(30, "Lookback window for lower TF")

float buying_volume = 0.0
float selling_volume = 0.0

// Get volume data from lower timeframe
[lower_close, lower_open, lower_high, lower_low, lower_volume] = request.security_lower_tf(syminfo.tickerid, timeframe, [close, open, high, low, volume])

// Calculate buying and selling volume based on price action in lower timeframe
for i = 0 to timeframe_lookback_period
    if array.size(lower_volume) > i and array.size(lower_close) > i and array.size(lower_open) > i
        // Get values for current lower timeframe bar
        float curr_volume = array.get(lower_volume, i)
        float curr_close = array.get(lower_close, i)
        float curr_open = array.get(lower_open, i)
        
        // Determine if bar is bullish or bearish
        if curr_close >= curr_open
            // Bullish bar - assign more volume to buyers
            buying_volume += curr_volume * 0.7
            selling_volume += curr_volume * 0.3
        else
            // Bearish bar - assign more volume to sellers
            buying_volume += curr_volume * 0.3
            selling_volume += curr_volume * 0.7

// Aggregate volume pressure 
float volume_pressure = (buying_volume - selling_volume) / (buying_volume + selling_volume)
float volume_strength = ta.sma(math.abs(volume_pressure), length_sma)

// Indicator Calculations
sma14 = ta.sma(close, length_sma)
ema7 = ta.ema(close, length_ema)
madif = ((sma14 - ema7) / ema7) * 1000
nmadif = madif * -1
vwd = madif * volume_pressure * volume_strength  * 100

rolling_mean = ta.sma(vwd, window)
rolling_std = ta.stdev(vwd, window)

rsi = ta.rsi(close, length_rsi)
rsi_mean = ta.sma(rsi, length_rsi)
rsi_std = ta.stdev(rsi, length_rsi)

// Thresholds
long_threshold = rolling_mean + 2 * rolling_std
short_threshold = rolling_mean - 2 * rolling_std


// Plot Shapes with Combined Conditions
plotshape(series=(vwd > long_threshold) and (rsi < rsi_mean - rsi_std), location=location.belowbar, color=color.green, style=shape.triangleup, title="Bullish Signal", size=size.small, offset=1, force_overlay=true)
plotshape(series=(vwd < short_threshold) and (rsi > rsi_mean + rsi_std), location=location.abovebar, color=color.red, style=shape.triangledown, title="Bearish Signal", size=size.small, offset=1, force_overlay=true)

// Determine histogram color based on RSI thresholds
hist_color = if rsi > rsi_mean + 1.5 * rsi_std
    color.red
else if rsi < rsi_mean - 1.5 * rsi_std
    color.green
else if nmadif >= 0
    color.new(color.green, 70)
else
    color.new(color.red, 70)

//plot histogram to see madif with color based on RSI
plot(nmadif, title="MACD Histogram", style=plot.style_columns, color=color.new(hist_color, 30))

//plot the vwd and thresholds last so it is shown as the top layer
plot(long_threshold, title="VWD Upper Std Dev", color=color.new(color.red, 10), linewidth=2)
plot(short_threshold, title="VWD Lower Std Dev", color=color.new(color.green, 10), linewidth=2)
plot(vwd, title="VWD", color=color.new(color.blue, 0), linewidth=3)
